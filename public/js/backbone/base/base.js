// Generated by CoffeeScript 1.4.0
(function() {
  var BaseCollection, BaseModel, BaseRouter, BaseView, tpl, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = (function(_super) {

    __extends(BaseModel, _super);

    function BaseModel() {
      return BaseModel.__super__.constructor.apply(this, arguments);
    }

    BaseModel.prototype.dump = function() {
      return console.log(JSON.stringify(this));
    };

    return BaseModel;

  })(Backbone.Model);

  BaseCollection = (function(_super) {

    __extends(BaseCollection, _super);

    function BaseCollection() {
      return BaseCollection.__super__.constructor.apply(this, arguments);
    }

    BaseCollection.prototype.dump = function() {
      return console.log(JSON.stringify(this));
    };

    return BaseCollection;

  })(Backbone.Collection);

  BaseView = (function(_super) {

    __extends(BaseView, _super);

    function BaseView() {
      return BaseView.__super__.constructor.apply(this, arguments);
    }

    return BaseView;

  })(Backbone.View);

  BaseRouter = (function(_super) {

    __extends(BaseRouter, _super);

    function BaseRouter() {
      return BaseRouter.__super__.constructor.apply(this, arguments);
    }

    return BaseRouter;

  })(Backbone.Router);

  this.app = (_ref = window.app) != null ? _ref : {};

  this.app.BaseModel = BaseModel;

  this.app.BaseCollection = BaseCollection;

  this.app.BaseView = BaseView;

  this.app.BaseRouter = BaseRouter;

  tpl = {
    templates: {},
    loadTemplates: function(names, callback) {
      var loadTemplate, that;
      that = this;
      loadTemplate = function(index) {
        var name;
        name = names[index];
        console.log("Loading template: " + name);
        return $.get("../templates/" + name + ".html", function(data) {
          that.templates[name] = data;
          index++;
          if (index < names.length) {
            return loadTemplate(index);
          } else {
            return callback();
          }
        });
      };
      return loadTemplate(0);
    },
    get: function(name) {
      return this.templates[name];
    }
  };

  this.app.tpl = tpl;

}).call(this);
