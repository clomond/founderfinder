// Generated by CoffeeScript 1.4.0
(function() {
  var MatchesView, ProfileRowView, ProfileView, ProfilesView, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ProfileView = (function(_super) {

    __extends(ProfileView, _super);

    function ProfileView() {
      return ProfileView.__super__.constructor.apply(this, arguments);
    }

    ProfileView.prototype.el = '#main-area';

    ProfileView.prototype.initialize = function() {
      _.bindAll(this, 'render');
      this.template = _.template(app.tpl.get('tpl-show-profile'));
      return this.render();
    };

    ProfileView.prototype.render = function() {
      var establishment_data;
      establishment_data = this.model.attributes;
      this.$el.html(this.template({
        m: establishment_data
      }));
      return this;
    };

    return ProfileView;

  })(app.BaseView);

  MatchesView = (function(_super) {

    __extends(MatchesView, _super);

    function MatchesView() {
      return MatchesView.__super__.constructor.apply(this, arguments);
    }

    MatchesView.prototype.el = "#main-area";

    MatchesView.prototype.initialize = function() {
      _.bindAll(this, 'render');
      this.template = _.template(app.tpl.get('tpl-matches'));
      return this.render();
    };

    MatchesView.prototype.render = function() {
      this.$el.html(this.template);
      this.profileCollection = new app.ProfileCollection;
      this.profileCollection.fetch({
        success: function(model, response) {
          return this.profilesView = new app.ProfilesView({
            collection: model
          });
        }
      });
      return this;
    };

    return MatchesView;

  })(app.BaseView);

  ProfilesView = (function(_super) {

    __extends(ProfilesView, _super);

    function ProfilesView() {
      return ProfilesView.__super__.constructor.apply(this, arguments);
    }

    ProfilesView.prototype.el = "#profiles";

    ProfilesView.prototype.initialize = function() {
      _.bindAll(this, 'render');
      this.template = _.template(app.tpl.get('tpl-profiles'));
      return this.render();
    };

    ProfilesView.prototype.render = function() {
      var tbody;
      console.log("rendering");
      tbody = this.$('tbody');
      console.log("tbody is ", tbody);
      console.log("self is", this.el);
      this.collection.each(function(item) {
        var displayView;
        console.log("inserting item:");
        console.log(item);
        displayView = new app.ProfileRowView({
          model: item
        });
        tbody.append(displayView.render().el);
        return console.log("displayView el", displayView.render().el);
      });
      return this;
    };

    return ProfilesView;

  })(app.BaseView);

  ProfileRowView = (function(_super) {

    __extends(ProfileRowView, _super);

    function ProfileRowView() {
      return ProfileRowView.__super__.constructor.apply(this, arguments);
    }

    ProfileRowView.prototype.tagName = "tr";

    ProfileRowView.prototype.initialize = function() {
      _.bindAll(this, 'render');
      this.template = _.template(app.tpl.get('tpl-profile-row'));
      return this.render();
    };

    ProfileRowView.prototype.render = function() {
      console.log("rendering");
      console.log(this.model.attributes.attributes);
      this.$el.html(this.template({
        m: this.model.attributes.attributes
      }));
      this.$el.attr('id', this.model.id);
      return this;
    };

    return ProfileRowView;

  })(app.BaseView);

  this.app = (_ref = window.app) != null ? _ref : {};

  this.app.ProfileView = ProfileView;

  this.app.MatchesView = MatchesView;

  this.app.ProfilesView = ProfilesView;

  this.app.ProfileRowView = ProfileRowView;

}).call(this);
